<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>睡到二三更时凡荣华皆成幻境</title>
  
  <subtitle>每份努力,必有回报</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zuhiul.github.io/"/>
  <updated>2019-01-07T13:45:22.534Z</updated>
  <id>http://zuhiul.github.io/</id>
  
  <author>
    <name>zuhiul</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Project Euler 222 Sphere Packing</title>
    <link href="http://zuhiul.github.io/2019/01/04/PE222/"/>
    <id>http://zuhiul.github.io/2019/01/04/PE222/</id>
    <published>2019-01-03T16:00:00.000Z</published>
    <updated>2019-01-07T13:45:22.534Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=222" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>What is the length of the shortest pipe, of internal radius $50$mm, that can fully contain $21$ balls of radii $30$mm, $31$mm, …, $50$mm?</p><p>Give your answer in micrometres ($10^{-6}$ m) rounded to the nearest integer.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>让你在一个内径$50$的圆管里塞$21$个内径分别为$31-50$的小球,问你圆管最短是多少</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>比较显然是dp</p><p>考虑dp状态:dp[i][j]表示选择小球对应的集合为j,并且用第i个小球结尾,然后我们转移的时候就直接添加一个小球,对于剩余的小球枚举一个结尾,取最优解就行了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">double</span> ans[maxm][<span class="number">1</span>&lt;&lt;maxm];</span><br><span class="line"><span class="keyword">int</span> num[maxm+<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//得到两个小球的距离</span></span><br><span class="line"><span class="keyword">int</span> t = a+b+<span class="number">60</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>*<span class="built_in">sqrt</span>(t*<span class="number">2</span><span class="number">-100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;maxm;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;maxm);j++) ans[i][j] = <span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;maxm);s++) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;maxm;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="number">0</span>)&#123;<span class="comment">//初值条件</span></span><br><span class="line">ans[i][<span class="number">1</span>&lt;&lt;i] = i+<span class="number">30</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((s &gt;&gt; i &amp; <span class="number">1</span>)==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t = s|(<span class="number">1</span>&lt;&lt;i);<span class="comment">//用S来扩展t</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;maxm;j++) <span class="keyword">if</span>(s&gt;&gt;j&amp;<span class="number">1</span>) ans[i][t] = min(ans[i][t],ans[j][s]+cal(i,j));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> rans = <span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;maxm;i++) rans = min(rans,ans[i][(<span class="number">1</span>&lt;&lt;maxm)<span class="number">-1</span>]+i+<span class="number">30</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>,rans*<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=222&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
      <category term="DP" scheme="http://zuhiul.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 122 Efficient exponentiation</title>
    <link href="http://zuhiul.github.io/2019/01/02/PE122/"/>
    <id>http://zuhiul.github.io/2019/01/02/PE122/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2019-01-07T13:48:15.515Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=122" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>The most naive way of computing $n^{15}$ requires fourteen multiplications:</p><p>$n \times n \times \dots \times n = n^{15}$</p><p>But using a “binary” method you can compute it in six multiplications:</p><p>$$<br>\begin{split}<br>n \times n &amp;= n^2\<br>n^2 \times n^2 &amp;= n^4\<br>n^4 \times n^4 &amp;= n^8\<br>n^8 \times n^4 &amp;= n^{12}\<br>n^{12} \times n^2 &amp;= n^{14}\<br>n^{14} \times n &amp;= n^{15}\<br>\end{split}<br>$$</p><p>However it is yet possible to compute it in only five multiplications:</p><p>$$<br>\begin{split}<br>n \times n &amp;= n^2\<br>n^2 \times n &amp;= n^3\<br>n^3 \times n^3 &amp;= n^6\<br>n^6 \times n^6 &amp;= n^{12}\<br>n^{12} \times n^3 &amp;= n^{15}\<br>\end{split}<br>$$</p><p>We shall define $m(k)$ to be the minimum number of multiplications to compute $n^k$; for example $m(15) = 5$.</p><p>For $1 \leq k \leq 200$, find $\sum m(k)$.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>我们知道快速计算一个数的幂次有各种不同的方法,快速幂只是其中一种而且不是最快的,然后问你对于1~200的幂次来说,最少需要几次乘法操作.</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>有一个<a href="https://en.wikipedia.org/wiki/Addition_chain" target="_blank" rel="noopener">wiki</a>讲的就是这个问题,可以看一看….</p><p>我们可以发现,对于所有幂次来说,我们按照最后一步操作的数来构成他的前驱,然后我们会发现他是一棵树,然后我们直接构造出这颗树出来,就是最优答案…..</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s[<span class="number">222</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1e8</span>,ind = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=a;i++)&#123;<span class="comment">//枚举每一个比他小的数,看是否可以作为他的前驱</span></span><br><span class="line"><span class="keyword">if</span>(s[i].size()+<span class="number">1</span>&gt;=now) <span class="keyword">continue</span>;<span class="comment">//如果不能优化解就不继续搜索</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x:s[i])<span class="comment">//枚举每一个前驱的子元素</span></span><br><span class="line"><span class="keyword">if</span>(s[i].find(a-x)!=s[i].end())&#123;<span class="comment">//如果能构成a</span></span><br><span class="line">now = s[i].size()+<span class="number">1</span>;<span class="comment">//更新解</span></span><br><span class="line">ind = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:s[ind]) s[a].insert(i);<span class="comment">//保存路径</span></span><br><span class="line">s[a].insert(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">s[<span class="number">1</span>].insert(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=<span class="number">200</span>;i++) cal(i);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">200</span>;i++) ans+=s[i].size()<span class="number">-1</span>;<span class="comment">//要把里面的1剪掉,因为合成1不要代价</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=122&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>gcd and fibonacii</title>
    <link href="http://zuhiul.github.io/2018/12/28/gcd_fibonacci/"/>
    <id>http://zuhiul.github.io/2018/12/28/gcd_fibonacci/</id>
    <published>2018-12-27T16:00:00.000Z</published>
    <updated>2019-01-07T13:57:57.746Z</updated>
    
    <content type="html"><![CDATA[<p>前两天看到一个比较奇怪的公式,然后队友让证明一下,公式如下</p><p>$$<br>gcd(f_i,f_j) = f_{gcd(i,j)}<br>$$</p><p>下面给出证明</p><h1 id="gcd-f-i-f-i-1-1"><a href="#gcd-f-i-f-i-1-1" class="headerlink" title="$gcd(f_i,f_{i-1}) = 1$"></a>$gcd(f_i,f_{i-1}) = 1$</h1><p>$$<br>\begin{aligned}<br>gcd(f_i,f_{i-1}) &amp;= gcd(f_{i-1}+f_{i-2},f_{i-1})\<br>&amp;= gcd(f_{i-2},f_{i-1})\<br>&amp;= gcd(f_{i-3},f_{i-2})\<br>&amp;= \dots\<br>&amp;= gcd(f_1,f_2)\<br>&amp;= 1<br>\end{aligned}<br>$$</p><h1 id="f-i-j-f-i-1-cdot-f-j-f-i-cdot-f-j-1"><a href="#f-i-j-f-i-1-cdot-f-j-f-i-cdot-f-j-1" class="headerlink" title="$f_{i+j} = f_{i-1}\cdot f_j + f_i\cdot f_{j+1}$"></a>$f_{i+j} = f_{i-1}\cdot f_j + f_i\cdot f_{j+1}$</h1><p>首先,$j = 1$时有</p><p>$f_{i+1} = f_{i-1}+f_i$</p><p>显然成立,</p><p>当$j = 2$时有</p><p>$$<br>\begin{split}<br>f_{i+2} &amp;= f_{i+1} + f_{i}\<br>&amp;= (f_{i}+f_{i-1}) + f_{i}\<br>&amp;= f_{i-1} \cdot 1 + f_{i} \cdot 2\<br>&amp;= f_{i-1} \cdot f_j + f_i \cdot f_{j+1}\<br>\end{split}<br>$$</p><p>然后我们证明,当$j = k-1$和$j = k-2$成立时,$j = k$也成立</p><p>也就是说已知</p><p>$$<br>\begin{cases}<br>f_{i+k-1} = f{i-1}\cdot f_{k-1} + f_{i}\cdot f_k\<br>f_{i+k-2} = f{i-1}\cdot f_{k-2} + f_{i}\cdot f_{k-1}\<br>\end{cases}<br>$$</p><p>然后我们累加上面两式,可以得到</p><p>$f_{i+k-1}+f_{i+k-2} = f{i-1}\cdot f_{k-1} + f_{i}\cdot f_k + f{i-1}\cdot f_{k-2} + f_{i}\cdot f_{k-1}$</p><p>$$<br>\therefore<br>\begin{split}<br>f_{i+k} &amp;= f_{i-1}\cdot (f_{k-1}+f{k-2}) + f_{i}\cdot (f_{k}+f_{k-1})\<br>        &amp;= f_{i-1}\cdot f_{k} + f_{i}\cdot f_{k+1}\<br>\end{split}<br>$$</p><h1 id="gcd-f-i-j-f-i-gcd-f-i-f-j"><a href="#gcd-f-i-j-f-i-gcd-f-i-f-j" class="headerlink" title="$ gcd(f_{i+j},f_{i}) = gcd(f_{i},f_{j}) $"></a>$ gcd(f_{i+j},f_{i}) = gcd(f_{i},f_{j}) $</h1><p>$$<br>\begin{split}<br>gcd(f_{i+j},f_{i}) &amp;= gcd(f_{i-1}\cdot f_j + f_i\cdot f_{j+1},f_{i})\<br>&amp;= gcd(f_{i-1}\cdot f_{j},f_{i})\<br>&amp;= gcd(f_{j},f_{i})\dots \dots \dots gcd(f_{i},f_{i-1}) = 1\<br>\end{split}<br>$$</p><p>所以上面的结论可以继续推广,容易得到</p><p>$$<br>gcd(f_{i},f_{j}) = gcd(f_{i\%j},f_{j})<br>$$</p><h1 id="gcd-f-i-f-j-f-gcd-i-j"><a href="#gcd-f-i-f-j-f-gcd-i-j" class="headerlink" title="$gcd(f_{i},f_{j}) = f_{gcd(i,j)} $"></a>$gcd(f_{i},f_{j}) = f_{gcd(i,j)} $</h1><p>由上面的结论,我们容易得到,我们不断调用上面的结论,直到$i==1|j==1$,然后可以得到,如果$k=gcd(i,j)$,那么有$gcd(f_{i},f_{j}) = gcd(f_{k},f_{1}) = f_{k} = f_{gcd(i,j)}$</p><p>命题得证</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天看到一个比较奇怪的公式,然后队友让证明一下,公式如下&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;gcd(f_i,f_j) = f_{gcd(i,j)}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;下面给出证明&lt;/p&gt;
&lt;h1 id=&quot;gcd-f-i-f-i-1-1&quot;&gt;&lt;a href=&quot;#gcd-f-i
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 143 Investigating the Torricelli point of a triangle</title>
    <link href="http://zuhiul.github.io/2018/12/28/PE143/"/>
    <id>http://zuhiul.github.io/2018/12/28/PE143/</id>
    <published>2018-12-27T16:00:00.000Z</published>
    <updated>2019-01-07T13:42:34.941Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=143" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Let ABC be a triangle with all interior angles being less than $120$ degrees. Let $X$ be any point inside the triangle and let $XA = p, XC = q$, and $XB = r$.</p><p>Fermat challenged Torricelli to find the position of X such that $p + q + r$ was minimised.</p><p>Torricelli was able to prove that if equilateral triangles AOB, BNC and AMC are constructed on each side of triangle ABC, the circumscribed circles of AOB, BNC, and AMC will intersect at a single point, T, inside the triangle. Moreover he proved that T, called the Torricelli/Fermat point, minimises $p + q + r$. Even more remarkable, it can be shown that when the sum is minimised, $AN = BM = CO = p + q + r$ and that AN, BM and CO also intersect at T.</p><p><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/PE143.gif" alt="avatar"></p><p>If the sum is minimised and a, b, c, p, q and r are all positive integers we shall call triangle ABC a Torricelli triangle. For example, $a = 399, b = 455, c = 511$ is an example of a Torricelli triangle, with $p + q + r = 784$.</p><p>Find the sum of all distinct values of $p + q + r ≤ 120000$ for Torricelli triangles.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>就是三个角都小于120度的三角形存在费马点,然后让你找到所有这样的三角形,使得图上对应的六条边都是整数,其中$T$就是费马点.然后你要找到所有$p+q+r$不同的所有三角形,然后把$p+q+r$求和.</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>对于每一个圆来说,因为里面的三角形是对边三角形,然后因为$T$在园上,于是有$T$对应的角大小一定是$180-60 = 120$度,然后同理可得,三个角都是$120$度,然后我们运用余弦定理可以得到$p^2+q^2+pq=b^2$,因为我们只要$p+q+r$不同的解,所以我们不妨设$p&gt;=q&gt;=r$,因为三个角都是$120$度,所以余弦定理都成立,所以我们可以得到</p><p>$$<br>\begin{split}<br>q^2+r^2+qr &amp;= a^2\<br>p^2+q^2+pq &amp;= b^2\<br>p^2+r^2+pr &amp;= c^2\<br>p&gt;=q&gt;=r\<br>\end{split}<br>$$</p><p>然后我们对于每对关系,可以显然发现都应该是类似的,然后我们可以存下来每个关系,然后暴搜就行了,emmmmmm$\dots$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> upper = <span class="number">1.2e5</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; to[upper+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> ans[upper&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>;i&lt;=upper;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j = min(upper-i,i);j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = i*i+j*j+i*j;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> y = <span class="built_in">sqrt</span>(x);</span><br><span class="line"><span class="keyword">if</span>(y*y==x) to[i].insert(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=upper;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j:to[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k:to[j])&#123;</span><br><span class="line"><span class="keyword">if</span>(i+j+k&gt;upper) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(to[i].count(k))&#123;</span><br><span class="line">ans[i+j+k] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=upper;i++) <span class="keyword">if</span>(ans[i]) rans+=i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;rans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=143&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>IC(answer.chepter2)</title>
    <link href="http://zuhiul.github.io/2018/12/24/IC_chepter2/"/>
    <id>http://zuhiul.github.io/2018/12/24/IC_chepter2/</id>
    <published>2018-12-23T16:00:00.000Z</published>
    <updated>2019-01-07T13:36:55.888Z</updated>
    
    <content type="html"><![CDATA[<p>作者自己辛苦原创,如有错误or转载or其他用途请联系qq:669415029,谢谢</p><p>1.$\emptyset$ : $4^5 = 1024$.${a}$ : $5<em>4</em>4<em>4 = 320$.${b}$ : $5</em>5<em>5</em>2 = 250$.${a,b}$ : $4<em>4</em>4*2 = 128$</p><p>2.$(13!)^4 = 1503561738404723998944447273369600000000$.</p><p>3.<br>$<br>\left(<br>    \begin{matrix}<br>        52\<br>        5<br>    \end{matrix}<br>\right)<br>=2598960<br>$</p><p>4.(a) $5<em>3</em>7<em>2 = 210$<br>(b) $620 = 2^2+3^1+5^1+7^1$,$3</em>2<em>2</em>2 = 24$<br>(c) $10^{10} = 2^{10} 5^{10}$,$11*11 = 121$</p><p>5.因为$10 = 2*5$,所以我们只用统计$2,5$的数量就行了,然后我们可以发现,$2$的数量显然多于$5$的数量,所以我们只用统计$5$的个数就是答案.下面给出一个通用的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a) ret+=a/=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.小数据暴力,大数据模拟</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者自己辛苦原创,如有错误or转载or其他用途请联系qq:669415029,谢谢&lt;/p&gt;
&lt;p&gt;1.$\emptyset$ : $4^5 = 1024$.${a}$ : $5&lt;em&gt;4&lt;/em&gt;4&lt;em&gt;4 = 320$.${b}$ : $5&lt;/em&gt;5&lt;em&gt;5&lt;/em
      
    
    </summary>
    
    
      <category term="IC" scheme="http://zuhiul.github.io/tags/IC/"/>
    
  </entry>
  
  <entry>
    <title>IC(answer.chepter1)</title>
    <link href="http://zuhiul.github.io/2018/12/24/IC_chepter1/"/>
    <id>http://zuhiul.github.io/2018/12/24/IC_chepter1/</id>
    <published>2018-12-23T16:00:00.000Z</published>
    <updated>2019-01-07T13:45:07.758Z</updated>
    
    <content type="html"><![CDATA[<p>作者自己辛苦原创,转载或其他用途请联系qq:669415029,谢谢</p><p>1.利用反证法容易得到,如果$n$和$m$都是奇数,那么$n*m$也是奇数,显然不可覆盖,所以$n$和$m$至少有一个偶数</p><p>2.我们定义行号从上到下为$1\dots m$,列号从左到右为$1\dots n$,然后我们就可以得到被切掉的那个方块只可能是奇数行奇数列,或者偶数行偶数列,我们考虑对这两种方案分别进行构造来得到我们想要的答案.</p><ul><li>奇数行奇数列:对于和他在同一行同一列的方块来说,因为他去掉了,所以剩下的一定是可以匹配的偶数,也就是说我们可以匹配上这一行一列,对于剩下的一定都是偶数行偶数列的联通块,显然可以构造</li><li>奇数行奇数列:这个稍微麻烦一点,我们可以选择他周围的奇数行奇数列的一个子矩阵,显然可以螺旋式的构造,也就是说我们用完左上角,对于剩下的容易证明也是两个偶数的联通块,同样可以构造,看图<br><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/IC1-1.png" alt="avatar"></li></ul><p>3.显然是不能获得自由的,因为我们可以将这个棋盘黑白二染色,然后可以发现对顶角颜色相同,每一步颜色都会反转,一共要走63步,所以最后一步一定会在异色块上,所以不行.</p><p>4.(a)对于每一个$n$来说我们直接考虑最后一块的摆放方法,如果是竖着放,那么剩下的就是$f(n-1)$的子问题,如果是横着放,那么倒数第二块显然也是横着放的,所以剩下的就是$f(n-2)$的子问题,所以显然可以得到的是$f(n) = f(n-1)+f(n-2)$,也就是说答案就是fibonacci.$\therefore f(12) = 233$</p><p>4.(b)这里我们可以考虑DP来做,具体程序如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxm][<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">3</span>] = dp[<span class="number">0</span>][<span class="number">6</span>] = dp[<span class="number">1</span>][<span class="number">1</span>] = dp[<span class="number">1</span>][<span class="number">4</span>] = dp[<span class="number">1</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;maxm;i++)&#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i<span class="number">-2</span>][<span class="number">3</span>]+dp[i<span class="number">-2</span>][<span class="number">6</span>]+dp[i<span class="number">-2</span>][<span class="number">0</span>];</span><br><span class="line">dp[i][<span class="number">1</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>]+dp[i<span class="number">-2</span>][<span class="number">1</span>];</span><br><span class="line">dp[i][<span class="number">3</span>] = dp[i][<span class="number">0</span>]+dp[i<span class="number">-2</span>][<span class="number">3</span>];</span><br><span class="line">dp[i][<span class="number">4</span>] = dp[i][<span class="number">1</span>];</span><br><span class="line">dp[i][<span class="number">6</span>] = dp[i][<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以发现$g(n) = 4*g(n-2)-g(n-4)$</p><p>5.用4.(b)的代码容易可得,$g(4) = 11$</p><p>6.同样采用反证法容易证得$n$是偶数,下面我们考虑$n$是奇数扣掉中间一块的情况.不妨假设八个角上的颜色是黑色,可以得到黑块数量是$4k^3+6k^2+3k+1$,白块的数量是$4k^3+6k^2+3k$,我们可以分两种情况讨论,我们假设$n = 2k+1$</p><ul><li>当k是奇数时,也就是$k = 2t+1$,即$n = 4t+3$,中间块是白色的.然后扣掉白块后,显然黑块和白块不匹配,然后不行鸭.</li><li>当k是偶数时,也就是$k = 2t$,即$n = 4t+1$,中间块是黑色的,扣掉黑块后,白块和黑块是匹配的,可能可以.下面我们证明$n = 4t+1$时是可行的<ul><li>我们按照层数拆分,我们抽掉其中的第$2t+1$层,我们可以得到,这一层显然是可行的,类比于二阶的时候,我们扣掉中心块</li><li>对于剩下的两个联通块,我们显然可以得到是他们对称,我们只考虑上面的$2t$层的部分,我们每两层考虑一下</li><li>对于相连的两层,也就是$2<em>n</em>n$的形状,我们显然可以构造,所以整个三维结构是可以构造的.</li></ul></li></ul><p>7.首先证明$a$既是$n$的因子,又是&amp;&amp;m&amp;&amp;的因子</p><ul><li>因为$a$是$b$的因子,所以$a<em>b$的可以看成多个$a</em>a$的,采用反证法,假设$a$不是$m$的因子,那么对于剩下的$(m%a)<em>(n%a)$的矩阵显然不可以用$a</em>a$的矩阵填满,所以$m%a==0&amp;&amp;n%a==0$.</li></ul><p>再证$b$是$n$或者$m$的因子</p><ul><li>同样反证法,我们将$a,b,m,n$同时缩小$a$倍,然后可以转化成,现在有一个$x<em>y$的棋盘,我要用一个$1</em>z$的棋盘去覆盖他,但是$gcd(x,z)=gcd(y,z)=1$,这个可以显然发现是不可能的</li></ul><p>8.先证:存在完美覆盖$\rightarrow$存在平凡完美覆盖</p><ul><li>利用习题7,我们得到如果存在完美覆盖,那么$gcd(n,a)=gcd(m,a)=a$并且$gcd(m,b)=b$,然后我们显然可以让$b$的朝向指向$m$的方向,也就是存在平凡完美覆盖</li></ul><p>再证:存在平凡完美覆盖$\rightarrow$存在完美覆盖</p><ul><li>显然</li></ul><p>9.显然,举个简单例子$n=5,m=6,a=2,b=3$存在完美覆盖,但是不存在平凡完美覆盖.</p><p>10.假设存在不妨设四个变量是$a,b,c,d$,那么可以得到$a+b=b+c$即$a=c$显然不能构成幻方</p><p>11.12.13 如图</p><p><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/IC1-2.png" alt="avatar"></p><p>14.所有可能的构造如图</p><p><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/IC1-3.png" alt="avatar"></p><p>15.暴力枚举的,确实没有解,并不知道为什么……</p><p>16.$n$阶幻方,幻方总和是$n^2<em>(n^2+1)/2$,所以每一行每一列求和都是$n</em>(n^2+1)/2$,现在替换后每一行每一列的和换成了$n<em>(n^2+1) - n</em>(n^2+1)/2 = n*(n^2+1)/2$所以可能是个幻方,然后因为里面的元素都是属于$[1,n^2]$之间的,所以$n^2+1-a$可以保证换完之后每个元素还是只出现一次,所以新生成的还是幻方.</p><p>17.给出$n=4$和$n=8$时的图…….</p><p><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/IC1-4.png" alt="avatar"></p><p>18.这个应该是显然的,因为二阶幻方都没有,显然没有二阶幻方体.</p><p>19.首先我们拆开来看没一个单独的平面,我们可以得到,对于一个四阶幻方来说,如果对角线也满足幻和,那么显然可以得到任意三阶子矩阵的对顶角之和等于幻和的一半,所以我们任取出四阶幻方体的任一三阶子体,可以得到类似于$a+b=b+c$的等式,也就是说存在$a==c$的情况,这显然和题意不符,所以不可能存在四阶幻方体.</p><p>20.首先,$10$和$5$一个颜色,$1,3,7,9$一个颜色,$2,4,6,8$一种颜色,可以得到可以由三种颜色构成,然后,$1,2,10$相互接壤,显然需要三种及以上颜色来涂,方案数为$3<em>2</em>1 = 6$.</p><p>21.(a) 二阶的显然不存在,书后面给了答案,还有一个比较简单的想法就是如果存在显然可以得到类似于$a==b$的结论,所以不存在.</p><p>(b) 暴搜剪枝,emmmmm……如图</p><p><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/IC1-5.jpg" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者自己辛苦原创,转载或其他用途请联系qq:669415029,谢谢&lt;/p&gt;
&lt;p&gt;1.利用反证法容易得到,如果$n$和$m$都是奇数,那么$n*m$也是奇数,显然不可覆盖,所以$n$和$m$至少有一个偶数&lt;/p&gt;
&lt;p&gt;2.我们定义行号从上到下为$1\dots m$,列号
      
    
    </summary>
    
    
      <category term="IC" scheme="http://zuhiul.github.io/tags/IC/"/>
    
  </entry>
  
  <entry>
    <title>matlab</title>
    <link href="http://zuhiul.github.io/2018/12/23/matlab/"/>
    <id>http://zuhiul.github.io/2018/12/23/matlab/</id>
    <published>2018-12-22T16:00:00.000Z</published>
    <updated>2019-01-07T13:45:12.494Z</updated>
    
    <content type="html"><![CDATA[<h3 id="系统级命令"><a href="#系统级命令" class="headerlink" title="系统级命令"></a>系统级命令</h3><table><thead><tr><th style="text-align:center">命令名称</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">clear</td><td style="text-align:center">清楚内存中所有的或指定的变量和函数</td></tr><tr><td style="text-align:center">cd</td><td style="text-align:center">显示和改变当前工作目录</td></tr><tr><td style="text-align:center">clc</td><td style="text-align:center">擦除MATLAB工作窗口中所有显示的内容</td></tr><tr><td style="text-align:center">clf</td><td style="text-align:center">擦除MATLAB当前工作窗口中的图形</td></tr><tr><td style="text-align:center">dir</td><td style="text-align:center">列出当前或者指定目录下的子目录和文件清单</td></tr><tr><td style="text-align:center">disp</td><td style="text-align:center">在运行中显示变量或文字信息</td></tr><tr><td style="text-align:center">echo</td><td style="text-align:center">控制运行的文字命令是否显示</td></tr><tr><td style="text-align:center">hold</td><td style="text-align:center">控制当前的图形窗口对象是否被刷新</td></tr><tr><td style="text-align:center">home</td><td style="text-align:center">擦除命令窗口中的内容,并把光标移动到命令窗口</td></tr><tr><td style="text-align:center">pack</td><td style="text-align:center">收集内存碎片以扩大内存空间</td></tr><tr><td style="text-align:center">quit</td><td style="text-align:center">关闭并退出MATLAB</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">显示所指定文件的全部内容</td></tr><tr><td style="text-align:center">exit</td><td style="text-align:center">退出MATLAB</td></tr><tr><td style="text-align:center">save</td><td style="text-align:center">将工作区的变量存放到指定文件</td></tr><tr><td style="text-align:center">load</td><td style="text-align:center">回复保存过的变量</td></tr></tbody></table><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">ans</td><td style="text-align:center">结果的缺省变量名</td></tr><tr><td style="text-align:center">pi</td><td style="text-align:center">圆周率</td></tr><tr><td style="text-align:center">i,j</td><td style="text-align:center">虚数单位</td></tr><tr><td style="text-align:center">inf</td><td style="text-align:center">无穷大</td></tr><tr><td style="text-align:center">NaN</td><td style="text-align:center">not a number</td></tr></tbody></table><h3 id="矩阵函数"><a href="#矩阵函数" class="headerlink" title="矩阵函数"></a>矩阵函数</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">complex</td><td style="text-align:center">将两个矩阵并成一个复矩阵</td></tr><tr><td style="text-align:center">zeros(a,b)</td><td style="text-align:center">a*b全0阵</td></tr><tr><td style="text-align:center">ones(a,b)</td><td style="text-align:center">a*b全1阵</td></tr><tr><td style="text-align:center">eye(a,b)</td><td style="text-align:center">a*b单位矩阵</td></tr><tr><td style="text-align:center">randi([a,b],m,n)</td><td style="text-align:center">m*n在a,b之间等概率随机整数矩阵</td></tr><tr><td style="text-align:center">randn(a,b)</td><td style="text-align:center">产生均值为0,方差为1的a*b的高斯分布随机阵</td></tr><tr><td style="text-align:center">repmat(a,b,c)</td><td style="text-align:center">将a矩阵铺放成b<em>c的形式,总大小size(a)</em>b*c</td></tr><tr><td style="text-align:center">size(a)</td><td style="text-align:center">确定矩阵大小,返回[行数,列数]</td></tr><tr><td style="text-align:center">length(a)</td><td style="text-align:center">确定向量元素的个数</td></tr><tr><td style="text-align:center">numel(a)</td><td style="text-align:center">确定矩阵中元素个数</td></tr><tr><td style="text-align:center">find()</td><td style="text-align:center">查找矩阵中满足条件的下标,或者行列</td></tr><tr><td style="text-align:center">reshape(a,b,c)</td><td style="text-align:center">将a变成b行c列(按列重拍)</td></tr><tr><td style="text-align:center">a’</td><td style="text-align:center">转置,复数则共轭转置</td></tr><tr><td style="text-align:center">a(:)</td><td style="text-align:center">变成一列</td></tr><tr><td style="text-align:center">rot90</td><td style="text-align:center">旋转</td></tr><tr><td style="text-align:center">fliplr</td><td style="text-align:center">左右翻转</td></tr><tr><td style="text-align:center">flipud</td><td style="text-align:center">上下翻转</td></tr><tr><td style="text-align:center">diag</td><td style="text-align:center">抽取主对角线</td></tr><tr><td style="text-align:center">tril</td><td style="text-align:center">抽取上三角</td></tr><tr><td style="text-align:center">triu</td><td style="text-align:center">抽取下三角</td></tr><tr><td style="text-align:center">max</td><td style="text-align:center">各列最大值</td></tr><tr><td style="text-align:center">min</td><td style="text-align:center">各列最小值</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">各列递增排序</td></tr><tr><td style="text-align:center">sum</td><td style="text-align:center">各列求和</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">各列平均值</td></tr><tr><td style="text-align:center">std</td><td style="text-align:center">各列标准差</td></tr><tr><td style="text-align:center">var</td><td style="text-align:center">各列方差</td></tr></tbody></table><h3 id="基本数学函数"><a href="#基本数学函数" class="headerlink" title="基本数学函数"></a>基本数学函数</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">abs(x)</td><td style="text-align:center">x中每个实数元素的绝对值,复数元素的模</td></tr><tr><td style="text-align:center">sqrt(x)</td><td style="text-align:center">x中每个元素求平方根</td></tr><tr><td style="text-align:center">exp(x)</td><td style="text-align:center">指数运算</td></tr><tr><td style="text-align:center">real(x)</td><td style="text-align:center">求实部</td></tr><tr><td style="text-align:center">imag(x)</td><td style="text-align:center">求虚部</td></tr><tr><td style="text-align:center">conj(x)</td><td style="text-align:center">求共轭</td></tr><tr><td style="text-align:center">angle(x)</td><td style="text-align:center">求相位角</td></tr><tr><td style="text-align:center">sin(x)</td><td style="text-align:center">正弦</td></tr><tr><td style="text-align:center">cos(x)</td><td style="text-align:center">余弦</td></tr><tr><td style="text-align:center">asin(x)</td><td style="text-align:center">反正弦</td></tr><tr><td style="text-align:center">acos(x)</td><td style="text-align:center">反余弦</td></tr><tr><td style="text-align:center">tan(x)</td><td style="text-align:center">正切</td></tr><tr><td style="text-align:center">atan(x)</td><td style="text-align:center">反正切</td></tr><tr><td style="text-align:center">log10(x)</td><td style="text-align:center">常用对数lgx</td></tr><tr><td style="text-align:center">log(x)</td><td style="text-align:center">自然对数lnx</td></tr><tr><td style="text-align:center">loga(b)</td><td style="text-align:center">任意对数</td></tr><tr><td style="text-align:center">mod(x,y)</td><td style="text-align:center">求余函数</td></tr><tr><td style="text-align:center">rem(x,y)</td><td style="text-align:center">输出对应元素的余数</td></tr><tr><td style="text-align:center">sign(x)</td><td style="text-align:center">求矩阵中元素的正负号</td></tr><tr><td style="text-align:center">lcm(x,y)</td><td style="text-align:center">最小公倍数</td></tr><tr><td style="text-align:center">gcd(x,y)</td><td style="text-align:center">最大公约数</td></tr><tr><td style="text-align:center">round(a)</td><td style="text-align:center">四舍五入</td></tr><tr><td style="text-align:center">fix(a)</td><td style="text-align:center">按0的方向取整</td></tr><tr><td style="text-align:center">floor(a)</td><td style="text-align:center">向负无穷方向取整</td></tr><tr><td style="text-align:center">ceil(a)</td><td style="text-align:center">向正无穷方向取整</td></tr><tr><td style="text-align:center">randperm(n)</td><td style="text-align:center">产生一个长度为n的排列</td></tr></tbody></table><h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">plot(x,y,’option’)</td><td style="text-align:center">x横轴,y纵轴,逐点连折线绘制二维图形,参数见下表</td></tr><tr><td style="text-align:center">plot(y)</td><td style="text-align:center">y为向量,以下标作为x轴,y为纵轴,绘制曲线</td></tr><tr><td style="text-align:center">title(‘text’)</td><td style="text-align:center">添加标题</td></tr><tr><td style="text-align:center">xlabel(‘text’)</td><td style="text-align:center">x轴加标注</td></tr><tr><td style="text-align:center">ylabel(‘text’)</td><td style="text-align:center">y轴加标记</td></tr><tr><td style="text-align:center">legend(‘图例1’,’图例2’,…)</td><td style="text-align:center">添加图例</td></tr><tr><td style="text-align:center">text(x,y,’text’)</td><td style="text-align:center">在指定位置添加文本字符串</td></tr><tr><td style="text-align:center">gtext(‘text’)</td><td style="text-align:center">用鼠标放置文本</td></tr><tr><td style="text-align:center">axis([xmin xmax ymin ymax zmin zmax])</td><td style="text-align:center">调整坐标</td></tr><tr><td style="text-align:center">hold</td><td style="text-align:center">图形保持函数</td></tr><tr><td style="text-align:center">subplot</td><td style="text-align:center">子图分割命令</td></tr><tr><td style="text-align:center">stem</td><td style="text-align:center">离散序列</td></tr></tbody></table><h4 id="绘图参数表"><a href="#绘图参数表" class="headerlink" title="绘图参数表"></a>绘图参数表</h4><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">含义</th><th style="text-align:center">符号</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">y</td><td style="text-align:center">黄</td><td style="text-align:center">b</td><td style="text-align:center">蓝</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">洋红</td><td style="text-align:center">w</td><td style="text-align:center">白</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">青</td><td style="text-align:center">k</td><td style="text-align:center">黑</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">红</td><td style="text-align:center">g</td><td style="text-align:center">绿</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">实线</td><td style="text-align:center">–</td><td style="text-align:center">虚线</td></tr><tr><td style="text-align:center">:</td><td style="text-align:center">点线</td><td style="text-align:center">-.</td><td style="text-align:center">点划线</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">点</td><td style="text-align:center">o</td><td style="text-align:center">圆</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">叉号</td><td style="text-align:center">+</td><td style="text-align:center">加号</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">向上的三角形</td><td style="text-align:center">v</td><td style="text-align:center">向下的三角形</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号</td><td style="text-align:center">&lt;</td><td style="text-align:center">小于号</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">正方形</td><td style="text-align:center">d</td><td style="text-align:center">菱形</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">五角星</td><td style="text-align:center">h</td><td style="text-align:center">六角星</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">星号</td></tr></tbody></table><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">abs</td><td style="text-align:center">字符串到ascii转换</td></tr><tr><td style="text-align:center">str2mat</td><td style="text-align:center">字符串转换成字符矩阵</td></tr><tr><td style="text-align:center">setstr</td><td style="text-align:center">ascii转字符串</td></tr><tr><td style="text-align:center">num2str</td><td style="text-align:center">数值转字符串</td></tr><tr><td style="text-align:center">str2num</td><td style="text-align:center">字符串转换成数值</td></tr><tr><td style="text-align:center">dec2bin</td><td style="text-align:center">十进制数转二进制字符串</td></tr><tr><td style="text-align:center">bin2dec</td><td style="text-align:center">二进制串转十进制</td></tr><tr><td style="text-align:center">int2str</td><td style="text-align:center">将数值取整后转成字符串</td></tr><tr><td style="text-align:center">upper</td><td style="text-align:center">字符串转换成大写</td></tr><tr><td style="text-align:center">lower</td><td style="text-align:center">字符串转换成小写</td></tr><tr><td style="text-align:center">sprintf</td><td style="text-align:center">用格式控制,数字转字符串</td></tr><tr><td style="text-align:center">sscanf</td><td style="text-align:center">格式控制,字符串转数字</td></tr></tbody></table><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">input(‘text’)</td><td style="text-align:center">键盘提示输入</td></tr><tr><td style="text-align:center">fprintf()</td><td style="text-align:center">格式输出</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;系统级命令&quot;&gt;&lt;a href=&quot;#系统级命令&quot; class=&quot;headerlink&quot; title=&quot;系统级命令&quot;&gt;&lt;/a&gt;系统级命令&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;命令名称&lt;/th&gt;

      
    
    </summary>
    
    
      <category term="live" scheme="http://zuhiul.github.io/tags/live/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 463 A weird recurrence relation</title>
    <link href="http://zuhiul.github.io/2018/12/23/PE463/"/>
    <id>http://zuhiul.github.io/2018/12/23/PE463/</id>
    <published>2018-12-22T16:00:00.000Z</published>
    <updated>2019-01-07T13:43:40.966Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=463" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>The function $f$ is defined for all positive integers as follows:</p><p>$f(1)$ = $1$</p><p>$f(3)$ = $3$</p><p>$f(2n)$ = $f(n)$</p><p>$f(4n+1)$ = $2\cdot f(2n+1)-f(n)$</p><p>$f(4n+3)$ = $3\cdot f(2n+1)-2\cdot f(n)$</p><p>The function $S(n)$ is defined as $\sum_{i=1}^{n} f(i)$.</p><p>$S(8)=22$ and $S(100)=3604$.</p><p>Find $S(3^{37})$. Give the last $9$ digits of your answer.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>就是给你一个序列,问你这个序列的前缀和是多少</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>显然是推公式嘛.</p><p>根据题意我们显然可以得到</p><p>$f(4n)+f(4n+1)+f(4n+2)+f(4n+3) = 6\cdot f(2n+1) - 2\cdot f(n)$ for $n\geq 1$</p><p>然后我们每四项加一下就可以得到下面这个公式</p><p>$$<br>\begin{split}<br>S(4n+3) &amp;= \sum_{i=1}^{4i+3} f(i)\<br>        &amp;= 5 + \sum_{i=4}^{4i+3} f(i)\<br>        &amp;= 5 + \sum_{i=1}^{n} (6\cdot f(2i+1) - 2\cdot f(i))\<br>        &amp;= 5 + 6\sum_{i=1}^{n} (f(2i+1)+f(2i)) - 8\sum_{i=1}^{n} f(i)\<br>        &amp;= 5 + 6\sum_{i=2}^{2n+1} f(i) - 8\sum_{i=1}^{n} f(i)\<br>        &amp;= 5 - 6 + 6\sum{i=1}{2n+1} f(i) - 8\sum_{i=1}^{n} f(i)\<br>        &amp;= -1 + 6\sum{i=1}{2n+1} f(i) -8\sum_{i=1}^{n} f(i)<br>\end{split}<br>$$</p><p>然后瞎搞就行了$\dots$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;<span class="keyword">return</span> (a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;<span class="keyword">return</span> a*b%mod;&#125;</span><br><span class="line"><span class="keyword">int</span> num[maxm];</span><br><span class="line"><span class="keyword">int</span> sum[maxm];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;maxm&amp;&amp;num[a]) <span class="keyword">return</span> num[a];</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>((a&amp;<span class="number">1</span>)^<span class="number">1</span>) <span class="keyword">return</span> f(a&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((a&amp;<span class="number">3</span>)==<span class="number">3</span>) <span class="keyword">return</span> add(mul(<span class="number">3</span>,f(a&gt;&gt;<span class="number">1</span>)),mod-(f(a&gt;&gt;<span class="number">2</span>)&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> add((f(a&gt;&gt;<span class="number">1</span>|<span class="number">1</span>)&lt;&lt;<span class="number">1</span>),mod-f(a&gt;&gt;<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">S</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;maxm) <span class="keyword">return</span> sum[a];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a%<span class="number">4</span>==<span class="number">3</span>)&#123;</span><br><span class="line">ret = add(ret,mul(<span class="number">6</span>,S(a&gt;&gt;<span class="number">1</span>)));</span><br><span class="line">ret = add(ret,mod-mul(<span class="number">8</span>,S(a&gt;&gt;<span class="number">2</span>)));</span><br><span class="line">ret = add(ret,mod<span class="number">-1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(a%<span class="number">4</span>!=<span class="number">3</span>) ret = add(ret,mod-f(++a));</span><br><span class="line">ret = add(ret,S(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;maxm;i++) num[i] = f(i),sum[i] = add(sum[i<span class="number">-1</span>],num[i]);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> nouse = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">37</span>;i++)&#123;</span><br><span class="line">nouse = (nouse&lt;&lt;<span class="number">2</span>)-nouse;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;S(nouse)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=463&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 368 A Kempner-like series</title>
    <link href="http://zuhiul.github.io/2018/12/21/PE368/"/>
    <id>http://zuhiul.github.io/2018/12/21/PE368/</id>
    <published>2018-12-20T16:00:00.000Z</published>
    <updated>2019-01-07T13:40:26.437Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=368" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>The <strong>harmonic</strong> series $1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}+\dots$ is well known to be divergent.</p><p>If we however omit from this series every term where the denominator has a $9$ in it, the series remarkably enough converges to approximately $22.9206766193$.</p><p>This modified harmonic series is called the <strong>Kempner</strong> series.</p><p>Let us now consider another modified harmonic series by omitting from the harmonic series every term where the denominator has $3$ or more equal consecutive digits. One can verify that out of the first $1200$ terms of the harmonic series, only $20$ terms will be omitted.<br>These $20$ omitted terms are:</p><p>$$\frac{1}{111},\frac{1}{222},\frac{1}{333},\frac{1}{444},\frac{1}{555},\frac{1}{666},\frac{1}{777},\frac{1}{888},\frac{1}{999},\frac{1}{1000},\frac{1}{1110}, \frac{1}{1111},\frac{1}{1112},\frac{1}{1113},\frac{1}{1114},\frac{1}{1115},\frac{1}{1116},\frac{1}{1117},\frac{1}{1118},\frac{1}{1119}$$</p><p>This series converges as well.</p><p>Find the value the series converges to.<br>Give your answer rounded to $10$ digits behind the decimal point.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>就是,调和级数不是发散的嘛,然后让你删掉那些分母含有连续三个相同数字的,然后可以证明剩下的级数是收敛的,然后问你收敛于多少.</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>做法比较巧妙,下面一点点分析.</p><p>首先我们令$S_1(n,d)$表示一个包含所有这样的$n$位数的集合,集合中所有的$n$位数最后一位是$n$,并且倒数第二位不是$n$.</p><p>$S_2(n,d)$表示一个包含所有这样的$n$位数的集合,集合中所有的$n$位数最后两位是$n$,并且倒数第三位不是$n$.</p><p>然后我们令</p><p>$f_1(n,d,j)$ = $\sum_{x\in S_1(n,d)} \frac{1}{x^j}$</p><p>$f_2(n,d,j)$ = $\sum_{x\in S_2(n,d)} \frac{1}{x^j}$</p><p>然后答案显然就是</p><p>$\sum_{i=1}^{99} \frac{1}{i}+\sum_{n=3}^{\infty } \sum_{d=0}^{9} [f_1(n,d,1)+f_2(n,d,1)]$</p><p>关键是我们怎么算$f_1(n,d,j)$和$f_2(n,d,j)$</p><p>二者分析方法一样,这里给出$f_2(n,d,j)$怎么推出来的.</p><p>首先根据定义我们有</p><p>$f_2(n,d,j)$ = $\sum_{x\in S_2(n,d)} \frac{1}{x^j}$</p><p>我们不妨枚举每一个$x$,然后累加就是答案,所以子问题就是如何快速计算$\frac{1}{x^j} where x \in S_2(n,d)$</p><p>因为最后一位是$d$,所以我们不妨设$x$ = $y<em>100+d</em>10+d$</p><p>然后可以得到</p><p>$(\frac{1}{x<em>100+d</em>10+d})^j$= $ \frac{1}{10^j} \cdot \frac{1}{(x<em>10+d)^j} \cdot (\frac{1}{1+\frac{d}{x</em>100+d*10}})^j$</p><p>然后我们将第三个分式化简.</p><p>考虑到</p><p>$(1+a)^{-b} = \sum_{i=0}^{\infty } C_{b+i-1}^i \cdot (-a)^b$</p><p>所以上式可以化简为</p><p>$$<br>\begin{split}<br>(\frac{1}{x<em>100+d</em>10+d})^j<br>&amp;= \frac{1}{10^j} \cdot \frac{1}{(x<em>10+d)^j} \cdot \sum_{i=0}^{\infty } C_{j+i-1}^{i}(\frac{-d}{x</em>100+d<em>10})^i\<br>&amp;= \frac{1}{10^j} \cdot \frac{1}{(x</em>10+d)^j} \cdot \sum_{i=0}^{\infty } C_{j+i-1}^{i}(\frac{-d}{10})^i\cdot(\frac{1}{x<em>10+d})^i\<br>&amp;= \frac{1}{10^j} \sum_{i=0}^{\infty } C_{j+i-1}^{i} \cdot (\frac{-d}{10})^i \cdot (\frac{1}{x</em>10+d})^{i+j}<br>\end{split}<br>$$</p><p>然后我们考虑累加所有的$x$也就是原来的$f_2(n,d,j)$</p><p>可以得到</p><p>$$f_2(n,d,j) = \frac{1}{10^j} \sum_{i=0}^{\infty } (\frac{-d}{10})^i \cdot C_{j+i-1}^{i} \cdot f_1(n-1,d,i+j)$$</p><p>同理可以推得 $f_1(n,d,j)$</p><p>然后就是代码如下啦啦啦$\dots$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">double</span> C[maxm*<span class="number">3</span>][maxm*<span class="number">3</span>];</span><br><span class="line"><span class="keyword">double</span> f1[<span class="number">2</span>][<span class="number">10</span>][maxm+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> f2[<span class="number">2</span>][<span class="number">10</span>][maxm+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//预处理出组合数和前99项的答案</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;maxm*<span class="number">3</span>;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>) C[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> C[i][j] = C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;<span class="number">100</span>;i++) ans+=<span class="number">1.0</span>/i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>;d&lt;=<span class="number">9</span>;d++)&#123;<span class="comment">//预处理出n = 3的情况</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=maxm;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> pre = <span class="number">10</span>;pre&lt;<span class="number">100</span>;pre++)&#123;</span><br><span class="line"><span class="keyword">int</span> fir = pre/<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> sec = pre%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(fir==sec&amp;&amp;sec==d) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(sec==d) f2[<span class="number">1</span>][d][j]+=<span class="number">1.0</span>/<span class="built_in">pow</span>(pre*<span class="number">10</span>+d,j);</span><br><span class="line"><span class="keyword">else</span> f1[<span class="number">1</span>][d][j]+=<span class="number">1.0</span>/<span class="built_in">pow</span>(pre*<span class="number">10</span>+d,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans+=f1[<span class="number">1</span>][d][<span class="number">1</span>]+f2[<span class="number">1</span>][d][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> nouse = <span class="number">4</span>;nouse&lt;=<span class="number">10000</span>;nouse++)&#123;<span class="comment">//滚动的算n&gt;=4的时候</span></span><br><span class="line"><span class="keyword">int</span> now = nouse&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> las = now^<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>;d&lt;=<span class="number">9</span>;d++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=maxm;j++)&#123;</span><br><span class="line">f1[now][d][j] = f2[now][d][j] = <span class="number">0</span>;<span class="comment">//别忘了初始化</span></span><br><span class="line"><span class="keyword">double</span> pre = <span class="number">1.0</span>/<span class="built_in">pow</span>(<span class="number">10.0</span>,j);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=maxm;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i+j&lt;=maxm) f2[now][d][j]+=pre*C[j+i<span class="number">-1</span>][i]*f1[las][d][i+j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x==d) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(i+j&lt;=maxm) f1[now][d][j]+=pre*C[j+i<span class="number">-1</span>][i]*(f1[las][x][i+j]+f2[las][x][i+j]);</span><br><span class="line">&#125;</span><br><span class="line">pre*=-d/<span class="number">10.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans+=f1[now][d][<span class="number">1</span>]+f2[now][d][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=368&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 492 Exploding sequence</title>
    <link href="http://zuhiul.github.io/2018/12/12/PE492/"/>
    <id>http://zuhiul.github.io/2018/12/12/PE492/</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2019-01-07T13:46:47.683Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=492" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Define the sequence $a_1, a_2, a_3,\dots$ as:</p><ul><li>$a_1 $=$ 1$</li><li>$a_{n+1} = 6a_n^2 + 10a_n + 3$ for $n \geq 1$.</li></ul><p>Examples:</p><p>$a_3 $=$ 2359$</p><p>$a_6 $=$ 269221280981320216750489044576319$</p><p>$a_6 mod 1000000007 $=$ 203064689$</p><p>$a_{100} mod 1000000007 $=$ 456482974$</p><p>Define $B(x,y,n)$ as $\sum (a_n mod $ $p)$ for every prime $p$ such that $x \leq p \leq x+y$.</p><p>Examples:</p><p>$B(10^9, 10^3, 10^3)$ = $23674718882$</p><p>$B(10^9, 10^3, 10^{15})$ = $20731563854$</p><p>Find $B(10^9, 10^7, 10^{15})$.</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个二次递推序列,问你这个数列的第$10^{15}$项膜上一堆质数之后求和是多少.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>看了<a href="https://blog.csdn.net/ACdreamers/article/details/44997467" target="_blank" rel="noopener">大佬</a>的题解之后才做出来的,还是太菜了$\dots$</p><p>下面是分析.</p><p>首先我们令$b_n = 6a_n+5$</p><p>于是有</p><p>$b_1$ = $11$</p><p>$b_{n+1} $=$ b_n^2-2$</p><p>然后我们令　$ x + \frac{1}{x}$ = $11$</p><p>可以显然发现　$b_n$ = $x^{2^{n-1}} + \frac{1}{x^{2^{n-1}}}$</p><p>于是不妨设　$x$ = $\frac{11+\sqrt{117}}{2}$</p><p>$\therefore b_n$ = $(\frac{11+\sqrt{117}}{2})^{2^{n-1}} + (\frac{11-\sqrt{117}}{2})^{2^{n-1}}$</p><p>然后我们可以直接算就行了</p><p>我们搞出递推式，然后用矩阵乘法的做法来做</p><p>我们考虑一个更一般的问题，</p><p>令$f_n = (\frac{11+\sqrt{117}}{2})^n + (\frac{11-\sqrt{117}}{2})^n$</p><p>然后我们考虑$f_n$如何求解</p><p>首先我们假设$f_n = x<em>f_{n-1}+y</em>f_{n-2}$</p><p>$令 (\frac{11+\sqrt{117}}{2})^{n-2}$ = $a$</p><p>$令 (\frac{11-\sqrt{117}}{2})^{n-2}$ = $b$</p><p>$ \therefore f_n$ =$ a<em>(\frac{11+\sqrt{117}}{2})^2+b</em>(\frac{11-\sqrt{117}}{2})^2 $</p><p> = $a<em>(\frac{238+22\sqrt{117}}{4})+b</em>(\frac{238-22\sqrt{117}}{4}) $</p><p>$\therefore f_{n-1}$=$a<em>(\frac{11+\sqrt{117}}{2})+b</em>(\frac{11-\sqrt{117}}{2}) $</p><p>$\therefore f_{n-2}$=$a+b $</p><p>$\therefore a<em>(\frac{238+22\sqrt{117}}{4})$+$b</em>(\frac{238-22\sqrt{117}}{4})$</p><p>=$x<em>a</em>(\frac{11+\sqrt{117}}{2})+x<em>b</em>(\frac{11-\sqrt{117}}{2}) + y*(a+b)$</p><p>将非根号项提出来，可以得到</p><p>$\therefore a<em>\frac{119}{2}+b</em>\frac{119}{2}$=$xa<em>\frac{11}{2}+xb</em>\frac{11}{2}+y(a+b) $</p><p>同理将根号项提出可以得到</p><p>$a<em>\frac{11}{2}+b</em>\frac{-11}{2}$=$xa<em>\frac{1}{2}+xb</em>\frac{-1}{2} $</p><p>然后可以解得</p><p>$\begin{cases}<br>x = 11\<br>y = -1<br>\end{cases}$</p><p>也就是说$f_n$ = $11*f_{n-1} - f_{n-2}$</p><p>好了，我们得到了$f_n$的递推式，然后考虑原问题，也就是说</p><p>$$<br>\left(<br>    \begin{matrix}<br>        b_{n+1}\<br>        b_n<br>    \end{matrix}<br>\right)<br>=\left(<br>    \begin{matrix}<br>        11 &amp; -1\<br>        1 &amp; 0<br>    \end{matrix}<br>\right)^{2^{n-1}-1}<br>\left(<br>    \begin{matrix}<br>        b_2\<br>        b_1<br>    \end{matrix}<br>\right)<br>=\left(<br>    \begin{matrix}<br>        11 &amp; -1\<br>        1 &amp; 0<br>    \end{matrix}<br>\right)^{2^{n-1}-1}<br>\left(<br>    \begin{matrix}<br>        119\<br>        11<br>    \end{matrix}<br>\right)<br>$$</p><p>$\because n$ 很大($10^{15}$)</p><p>$\therefore 2^{n-1}-1$很大,以至于我们不能方便的计算</p><p>然后我们考虑降低指数</p><p>具体分析看<a href="https://blog.csdn.net/ACdreamers/article/details/44997467" target="_blank" rel="noopener">大佬</a>的分析,可以得到循环节可以是$(p+1)(p-1)$</p><p>这个值我们可以接受,然后直接裸的矩阵ksm就行了$\dots$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> n = <span class="number">1e15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> r = l+<span class="number">1e7</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123; <span class="keyword">return</span> (a+b)%mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123;</span><br><span class="line">a = add(a,mod,mod);</span><br><span class="line">b = add(b,mod,mod);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ret = add(ret,a,mod);</span><br><span class="line">a = add(a,a,mod);</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ret = mul(ret,a,mod);</span><br><span class="line">a = mul(a,a,mod);</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i*i&lt;=a;i++) <span class="keyword">if</span>(a%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">p</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">2</span>;j++) <span class="built_in">cout</span>&lt;&lt;mat[i][j]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">p <span class="title">mul</span><span class="params">(p a,p b,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123;</span><br><span class="line">p ret;</span><br><span class="line"><span class="built_in">memset</span>(ret.mat,<span class="number">0</span>,<span class="keyword">sizeof</span> ret.mat);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j  =<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;<span class="number">2</span>;k++)&#123;</span><br><span class="line">ret.mat[i][j] = add(ret.mat[i][j],mul(a.mat[i][k],b.mat[k][j],mod),mod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">p <span class="title">qpow</span><span class="params">(p a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123;</span><br><span class="line">p ret;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">2</span>;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">2</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) ret.mat[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ret.mat[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ret = mul(ret,a,mod);</span><br><span class="line">a = mul(a,a,mod);</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> prime)</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MOD = prime*prime<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> zhi = qpow(<span class="number">2</span>,n<span class="number">-1</span>,MOD);</span><br><span class="line">zhi = add(zhi,MOD<span class="number">-1</span>,MOD);</span><br><span class="line"></span><br><span class="line">p base;</span><br><span class="line">base.mat[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">11</span>,base.mat[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">base.mat[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span> ,base.mat[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">base = qpow(base,zhi,prime);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret1 = mul(base.mat[<span class="number">1</span>][<span class="number">0</span>],<span class="number">119</span>,prime);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret2 = mul(base.mat[<span class="number">1</span>][<span class="number">1</span>],<span class="number">11</span>,prime);</span><br><span class="line"><span class="keyword">return</span> add(ret1,ret2,prime);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">inv</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> mul(mod-mod/a,inv(mod%a,mod),mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(is_prime(i))&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> bn = solve(i);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> now1 = add(bn,i<span class="number">-5</span>,i);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> an = mul(now1,inv(<span class="number">6</span>,i),i);</span><br><span class="line">ans+=an;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">100000</span>==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=492&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 294 Sum of digits-experience</title>
    <link href="http://zuhiul.github.io/2018/12/09/PE294/"/>
    <id>http://zuhiul.github.io/2018/12/09/PE294/</id>
    <published>2018-12-08T16:00:00.000Z</published>
    <updated>2019-01-07T13:43:14.950Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=294" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>For a positive integer $k$, define $d(k)$ as the sum of the digits of $k$ in its usual decimal representation. Thus $d(42) = 4+2 = 6$.</p><p>For a positive integer $n$, define $S(n)$ as the number of positive integers $k &lt; 10^n$ with the following properties :</p><ul><li>$k$ is divisible by $23$ and</li><li>$d(k) = 23$. </li></ul><p>You are given that $S(9) = 263626$ and $S(42) = 6377168878570056$.</p><p>Find $S(11^{12})$ and give your answer mod $10^9$.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>你要找到一个所有满足一下三个条件的数字数量</p><p>假设这个数是$k$</p><ul><li>$k$ $&lt;$ $10^{11^{12}}$  </li><li>$k\%23$ = 0</li><li>$k$每个十进制位求和为$23$</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题目困扰了我两天,我一度以为自己读错题了,主要是数据范围太大了,大的人一点想法都没有$\dots$</p><p>下面说正解</p><p>虽然数据范围很大,但是我们可以从小数据入手</p><p>先看第二个条件$k%23==0$,是否感觉出了一丝丝猫腻?</p><p>于是我大胆写了一下,比较好想的就是一定存在一个$n$使得$10^n%23==1$,也就是说存在膜数存在循环,而且显然有循环节是$O(23)$的</p><p>于是大胆暴力,找到了,循环节长度为$22$</p><p>这也就是说,在十进制下,位数最多有$11^{12}$个,而且这些里面,可以拆分成$22$份,每一份里面,你不管把数字安排到哪里,都是同膜的</p><p>于是我们可以简单的把$11^{12}$近似的均分成了$22$份.而且每一份可以单独统计答案</p><p>然后问题就转化成了以下两个子问题:</p><ul><li>找到$a_1,a_2\dots a_{22}$使得$a_1+a_2+\dots +a_{22} = 23$</li><li>对于每一份就成了一个$a_i$个相同的球放入近似$11^{12}$个盒子里,每个盒子最多放$9$个球,问你方案数</li></ul><p>对于第一个子问题,我们显然可以动态规划搞一搞</p><p>定义$dp(i,j,k)$表示$a_1+a_2+\dots +a_i == j$并且当前膜数为$k$的方案数</p><p>然后暴力转移就行了</p><p>关键是第二个子问题不好想,因为盒子数量太大了,必须要有一个$log$的做法</p><p>然后就枚举算法<del>(毕竟会的算法不多)</del></p><p>然后就想到了分治,但是能不能分治呢,并不知道,写一发就知道了,然后跑的挺快的<del>(然后就过了)</del></p><p>并不会算分治的<del>玄学</del>复杂度</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*a*b%mod;&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">m = <span class="number">23</span>;</span><br><span class="line">n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">12</span>;i++) n*=<span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">///b ball,a boxes</span></span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">return</span> b&lt;=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> b==<span class="number">0</span>;</span><br><span class="line">pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">int</span>&gt; now = make_pair(a,b);</span><br><span class="line"><span class="keyword">if</span>(mp[now]) <span class="keyword">return</span> mp[now];</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l = a/<span class="number">2</span>,r = a-l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=b;i++) ret = add(ret,mul(solve(l,i),solve(r,b-i)));</span><br><span class="line"><span class="keyword">return</span> mp[now] = ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">30</span>][<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> has = n/(m<span class="number">-1</span>) + (i&lt;n%<span class="number">22</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">0</span>;j+t&lt;=m;t++)&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][j+t][(k+w*t)%m] = add(dp[i+<span class="number">1</span>][j+t][(k+w*t)%m],mul(dp[i][j][k],solve(has,t)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">w = w*<span class="number">10</span>%m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[m<span class="number">-1</span>][m][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=294&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 303 Multiples with small digits</title>
    <link href="http://zuhiul.github.io/2018/12/08/PE303/"/>
    <id>http://zuhiul.github.io/2018/12/08/PE303/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2019-01-07T13:45:42.434Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=303" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>For a positive integer $n$, define $f(n)$ as the least positive multiple of $n$ that, written in base $10$, uses only digits $≤ 2$.</p><p>Thus $f(2)=2, f(3)=12, f(7)=21, f(42)=210, f(89)=1121222$.</p><p>Also,$ \sum_{n=1}^{100} \frac{f(n)}{n} = 11363107 $</p><p>Find $ \sum_{n=1}^{10000} \frac{f(n)}{n}.  $</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>问你对于每个数字来说，找到他的一个最小整数倍，使得最小整数倍在十进制下每位都小于3</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>很显然，考的是搜索，如何高效搜索．</p><p>最简单的想法就是枚举倍数，然后逐个判断是否合法，然后你会发现所有$999$的倍数都Ｔ飞了</p><p>然后考虑剪枝，因为可以显然得到，有些倍数一定无效，比如：</p><p>$5来说，5<em>1 = 5,5</em>11 = 55,5*21 = 105 \dots$</p><p>可以显然发现，对于$5$来说，以$1$结尾的倍数显然都不合理，因为他们的最后一位一定是$5$，可以直接判断掉．</p><p>然后你就就基本可以过掉大部分数据，但是还是有一个比较头疼，那就是$9999$.</p><p>因为他对应的答案贼大，暴力搜索基本都GG．然后我们换一个思路．</p><p>那就是我们直接暴力枚举所有的那些看起来长的像$3$进制的十进制数．</p><p>然后我们就直接存储所有的这样的数字，然后枚举？</p><p>那么显然内存不够，那怎么办呢？</p><p>dfs?</p><p>还是Ｔ飞，所以我们还要在此基础上剪枝．</p><p>首先我们可以构造出一种做法就是，每次搜索的时候得到的都是之前没出现过的最小的这类数字．</p><p>然后我们维护一个mod数组，表示当前这个mod正确的情况下，最小的这类数字是多少</p><p>然后答案显然就是mod[0]啦…….</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll vis[<span class="number">10000</span>+<span class="number">100</span>];</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;ll&gt; que;</span><br><span class="line">que.push(<span class="number">1</span>),que.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">vis[<span class="number">1</span>] = <span class="number">1</span>; vis[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">ll now = que.front(); que.pop();</span><br><span class="line"><span class="keyword">if</span>(now%a==<span class="number">0</span>) <span class="keyword">return</span> now/a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">ll buf = now*<span class="number">10</span>+i;</span><br><span class="line">ll buff = buf%a;</span><br><span class="line"><span class="keyword">if</span>(vis[buff]) <span class="keyword">continue</span>;</span><br><span class="line">vis[buff] = buf;</span><br><span class="line">que.push(buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++) ans+=cal(i);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=303&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
      <category term="搜索" scheme="http://zuhiul.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 288 An enormous factorial</title>
    <link href="http://zuhiul.github.io/2018/12/08/PE288/"/>
    <id>http://zuhiul.github.io/2018/12/08/PE288/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2019-01-07T13:39:08.868Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=288" target="_blank" rel="noopener">开启传送门</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>For any prime $p$ the number $N(p,q)$ is defined by $N(p,q) = \sum_{n=0}^q T_n*p^n$<br>with $T_n$ generated by the following random number generator:</p><p>$$<br>\begin{align<em>}<br>&amp;S_0 = 290797\<br>&amp;S_{n+1} = S_n^2 mod 50515093\<br>&amp;T_n = S_n mod p\<br>\end{align</em>}<br>$$</p><p>Let $Nfac(p,q)$ be the factorial of $N(p,q)$.<br>Let $NF(p,q)$ be the number of factors $p$ in $Nfac(p,q)$.</p><p>You are given that $NF(3,10000) mod 3^{20}=624955285$.</p><p>Find $NF(61,10^7)$ mod $61^{10}$</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>题意说的有点麻烦，我简化一下</p><p>$T_i$是随机生成的数据，$N(p,q)=\sum_{n=0}^q T_n*p^n$</p><p>问你$N(p,q)$的阶乘里面，质因数分解以后$p$的指数膜$p^{10}$答案是多少．</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先可以观察到的是，$T_i$很小，而且他是随机的，我们显然要把他存起来．</p><p>然后一个比较显然的结论是<br>$$<br>n!质因数分解后素因子p的数量为\lfloor \frac{n}{p} \rfloor + \lfloor \frac{n}{p^2} \rfloor + \cdots<br>$$<br>$$<br>\because 最后的答案要膜 p^{10} \therefore 我们统计的时候，对于第一项，我们统计指数为 [1,10]的，第二项[2,11],然后枚举项统计答案即可<br>$$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pow_num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T[maxm+<span class="number">100</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">61</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> powp[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">powp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=pow_num;i++) powp[i] = powp[i<span class="number">-1</span>]*p;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s0 = <span class="number">290797</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;maxm;i++) T[i] = (s0=s0*s0%<span class="number">50515093</span>)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = powp[pow_num];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;maxm;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;=i+pow_num<span class="number">-1</span>;j++) ans = (ans+(T[j]*powp[j-i]%mod))%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://projecteuler.net/problem=288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开启传送门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="PE" scheme="http://zuhiul.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>mathematical formula(Irregular updates)</title>
    <link href="http://zuhiul.github.io/2018/12/07/Mathematical_Formula/"/>
    <id>http://zuhiul.github.io/2018/12/07/Mathematical_Formula/</id>
    <published>2018-12-06T16:00:00.000Z</published>
    <updated>2019-01-07T13:42:03.269Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h3><p>|符号|功能|代码|符号|功能|代码|符号|功能|代码|<br>|$$+$$|加|+|$$-$$|减|-|$$\triangleleft$$||\triangleleft|<br>|$$\pm$$|加减|\pm|$$\mp$$|减加|\mp|$$\triangleright$$||\triangleright|<br>|$$\times$$|乘|\times|$$\setminus$$|差集|\setminus|$$\star$$|５星乘|\star|<br>|$$\cup$$|并|\cup|$$\cap$$|交|\cap|$$\ast$$|６星乘|\ast|<br>|$$\sqcup$$||\sqcup|$$\sqcap$$||\sqcap|$$\circ$$||\circ|<br>|$$\vee$$|合取|\vee|$$\wedge$$|析取|\wedge|$$\bullet$$||\bullet|<br>|$$\oplus$$|异或|\oplus|$$\ominus$$||\ominus|$$\diamond$$||\diamond|<br>|$$\odot$$||\odot|$$\oslash$$||\oslash|$$\uplus$$||\uplus|<br>|$$\otimes$$||\otimes|$$\bigcirc$$||\bigcirc|$$\amalg$$||\amalg|<br>|$$\bigtriangleup$$||\bigtriangleup|$$\bigtriangledown$$||\bigtriangledown|$$\dagger$$||\dagger|<br>|$$\lhd$$||\lhd|$$\rhd$$||\rhd|$$\ddagger$$||\ddagger|<br>|$$\unlhd$$||\unlhd|$$\unrhd$$||\unrhd|$$\wr$$||\wr|</p><h3 id="二元关系符"><a href="#二元关系符" class="headerlink" title="二元关系符"></a>二元关系符</h3><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">功能</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">功能</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">功能</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$$&lt;$$</td><td style="text-align:center">小于</td><td style="text-align:center">&lt;</td><td style="text-align:center">$$&gt;$$</td><td style="text-align:center">大于</td><td style="text-align:center">&gt;</td><td style="text-align:center">$$=$$</td><td style="text-align:center">等于</td><td style="text-align:center">=</td></tr><tr><td style="text-align:center">$$\leq$$</td><td style="text-align:center">小于等于</td><td style="text-align:center">\leq</td><td style="text-align:center">$$\geq$$</td><td style="text-align:center">大于等于</td><td style="text-align:center">\geq</td><td style="text-align:center">$$\equiv$$</td><td style="text-align:center">同余</td><td style="text-align:center">\equiv</td></tr><tr><td style="text-align:center">$$\ll$$</td><td style="text-align:center">远小于</td><td style="text-align:center">\ll</td><td style="text-align:center">$$\gg$$</td><td style="text-align:center">远大于</td><td style="text-align:center">\gg</td><td style="text-align:center">$$\doteq$$</td><td style="text-align:center">约等于</td><td style="text-align:center">\doteq</td></tr><tr><td style="text-align:center">$$\prec$$</td><td style="text-align:center"></td><td style="text-align:center">\prec</td><td style="text-align:center">$$\succ$$</td><td style="text-align:center"></td><td style="text-align:center">\succ</td><td style="text-align:center">$$\sim$$</td><td style="text-align:center"></td><td style="text-align:center">\sim</td></tr><tr><td style="text-align:center">$$\preceq$$</td><td style="text-align:center"></td><td style="text-align:center">\preceq</td><td style="text-align:center">$$\succeq$$</td><td style="text-align:center"></td><td style="text-align:center">\succeq</td><td style="text-align:center">$$\simeq$$</td><td style="text-align:center"></td><td style="text-align:center">\simeq</td></tr><tr><td style="text-align:center">$$\subset$$</td><td style="text-align:center">子集</td><td style="text-align:center">\subset</td><td style="text-align:center">$$\supset$$</td><td style="text-align:center">父集</td><td style="text-align:center">\supset</td><td style="text-align:center">$$\approx$$</td><td style="text-align:center"></td><td style="text-align:center">\approx</td></tr><tr><td style="text-align:center">$$\subseteq$$</td><td style="text-align:center"></td><td style="text-align:center">\subseteq</td><td style="text-align:center">$$\supseteq$$</td><td style="text-align:center"></td><td style="text-align:center">\supseteq</td><td style="text-align:center">$$\cong$$</td><td style="text-align:center"></td><td style="text-align:center">\cong</td></tr><tr><td style="text-align:center">$$\sqsubset$$</td><td style="text-align:center"></td><td style="text-align:center">\sqsubset</td><td style="text-align:center">$$\sqsupset$$</td><td style="text-align:center"></td><td style="text-align:center">\sqsupset</td><td style="text-align:center">$$\Join$$</td><td style="text-align:center"></td><td style="text-align:center">\Join</td></tr><tr><td style="text-align:center">$$\sqsubseteq$$</td><td style="text-align:center"></td><td style="text-align:center">\sqsubseteq</td><td style="text-align:center">$$\sqsupseteq$$</td><td style="text-align:center"></td><td style="text-align:center">\sqsupseteq</td><td style="text-align:center">$$\bowtie$$</td><td style="text-align:center"></td><td style="text-align:center">\bowtie</td></tr><tr><td style="text-align:center">$$\in$$</td><td style="text-align:center">属于</td><td style="text-align:center">\in</td><td style="text-align:center">$$\ni$$</td><td style="text-align:center">被属于</td><td style="text-align:center">\ni</td><td style="text-align:center">$$\propto$$</td><td style="text-align:center"></td><td style="text-align:center">\propto</td></tr><tr><td style="text-align:center">$$\vdash$$</td><td style="text-align:center">蕴涵</td><td style="text-align:center">\vdash</td><td style="text-align:center">$$\dashv$$</td><td style="text-align:center">被蕴涵</td><td style="text-align:center">\dashv</td><td style="text-align:center">$$\models$$</td><td style="text-align:center"></td><td style="text-align:center">\models</td></tr><tr><td style="text-align:center">$$\mid$$</td><td style="text-align:center">整除</td><td style="text-align:center">\mid</td><td style="text-align:center">$$\parallel$$</td><td style="text-align:center">平行</td><td style="text-align:center">\parallel</td><td style="text-align:center">$$\perp$$</td><td style="text-align:center"></td><td style="text-align:center">\perp</td></tr><tr><td style="text-align:center">$$\smile$$</td><td style="text-align:center"></td><td style="text-align:center">\smile</td><td style="text-align:center">$$\frown$$</td><td style="text-align:center"></td><td style="text-align:center">\frown</td><td style="text-align:center">$$\asymp$$</td><td style="text-align:center"></td><td style="text-align:center">\asymp</td></tr><tr><td style="text-align:center">$$:$$</td><td style="text-align:center"></td><td style="text-align:center">：</td><td style="text-align:center">$$\notin$$</td><td style="text-align:center">不属于</td><td style="text-align:center">\notin</td><td style="text-align:center">$$\neq$$</td><td style="text-align:center">不等于</td><td style="text-align:center">\neq</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二元运算符&quot;&gt;&lt;a href=&quot;#二元运算符&quot; class=&quot;headerlink&quot; title=&quot;二元运算符&quot;&gt;&lt;/a&gt;二元运算符&lt;/h3&gt;&lt;p&gt;|符号|功能|代码|符号|功能|代码|符号|功能|代码|&lt;br&gt;|$$+$$|加|+|$$-$$|减|-|$$\tr
      
    
    </summary>
    
    
      <category term="数学" scheme="http://zuhiul.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>UPCOJ 9805 Network Reliability</title>
    <link href="http://zuhiul.github.io/2018/12/03/UPCOJ9805/"/>
    <id>http://zuhiul.github.io/2018/12/03/UPCOJ9805/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2019-01-07T13:40:51.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>An undirected graph is given. Each edge of the graph disappears with a constant probability. Calculate the probability with which the remained graph is connected.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The first line contains three integers N (1≤N≤14), M (0≤M≤100) and P (0≤P≤100), separated by a single space. N is the number of the vertices and M is the number of the edges. P is the probability represented by a percentage.</p><p>The following M lines describe the edges. Each line contains two integers  $ v_i $  and $ u_i $ (1≤$ u_i $ ,$ v_i $≤N). ($ u_i $ ,$ v_i $) indicates the edge that connects the two vertices $ u_i $  and  v_i $.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>Output a line containing the probability with which the remained graph is connected. Your program may output an arbitrary number of digits after the decimal point. However, the absolute error should be  $10^{−9}$  or less.</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>3 3 50</p><p>1 2</p><p>2 3</p><p>3 1</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>0.500000000000</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>zuhiul 和不超过14 个妹子存在着不清不楚的关系，但是他发现，有些妹子们相互之间是闺蜜，所以这些是闺蜜的妹子们有 $P$ 的概率会发现对面和zuhiul有关系从而导致关系破裂，现在问你多大的概率下，大家相安无事(妹子们还是一个联通图)．</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>数据量这么小，显然状压呀．</p><p>所以我们定义</p><p>​    $DP[i] 表示 state==i 时，i 包含的点相互联通的概率　</p><p>那么比较容易得到答案就是    $ DP[(1&lt;&lt;n)-1] ​$</p><p>现在我们考虑转移：</p><p>​    因为要保证state内任意两点可达，所以我们不妨枚举出所有不可达的情况，容斥一下就行了．</p><p>​    所以每次对于一个state，我们可以枚举他的每个点的子集，然后对于其他点到这个集合都割掉就行了</p><p>​    你问我为什么不会重复和遗漏？</p><p>​    这就要用到神奇的构造了．</p><p>​    首先我们保证每个正确的点的子集里面都包含某一个点，那么对于包含这个点的所有正确子集来说肯定各不相同，这个保证了不会重复</p><p>​    然后怎么证明没有遗漏呢？</p><p>​    因为对于任何一个点来说，他都属于某一个联通块，我们实际上是在枚举每一个联通块，所以不会遗漏呀．</p><p>​    恩，大概就是这样，详情请看代码．</p><p>​    最后说一下复杂度．</p><p>​    应该是 $O(\sum_{i = 1}^{n} C_n^i * 2^i) = O(3^n)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="keyword">double</span> pow_p[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> pow_2[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lf"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">    p/=<span class="number">100</span>;</span><br><span class="line">    pow_2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    pow_p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;<span class="number">100</span>;i++) pow_p[i] = pow_p[i<span class="number">-1</span>]*p,pow_2[i] = pow_2[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,from,to;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        mat[--from][--to]++;</span><br><span class="line">        mat[to][from]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1</span>&lt;&lt;<span class="number">15</span>;</span><br><span class="line"><span class="keyword">double</span> dp[maxm];</span><br><span class="line"><span class="keyword">int</span> has[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> sub[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> state)</span></span>&#123;</span><br><span class="line">    dp[state] = <span class="number">1</span>;</span><br><span class="line">    has[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(state&amp;(<span class="number">1</span>&lt;&lt;i)) has[++has[<span class="number">0</span>]] = i;</span><br><span class="line">    <span class="keyword">if</span>(has[<span class="number">0</span>]==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> now = state&amp;(state<span class="number">-1</span>);now;now = (now<span class="number">-1</span>)&amp;state)&#123;</span><br><span class="line">        <span class="keyword">if</span>((now&amp;(<span class="number">1</span>&lt;&lt;has[<span class="number">1</span>]))==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        sub[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=has[<span class="number">0</span>];i++) <span class="keyword">if</span>(now&amp;(<span class="number">1</span>&lt;&lt;has[i])) sub[++sub[<span class="number">0</span>]] = has[i];</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=has[<span class="number">0</span>];i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=sub[<span class="number">0</span>];j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now&amp;(<span class="number">1</span>&lt;&lt;has[i])) <span class="keyword">continue</span>;</span><br><span class="line">                cnt+=mat[has[i]][sub[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        dp[state]-=dp[now]*pow_p[cnt];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nouse = pow_2[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;nouse;i++)&#123;</span><br><span class="line">        get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,dp[nouse<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;An undirected graph is given. Each edge of the graph disappear
      
    
    </summary>
    
    
      <category term="状压DP" scheme="http://zuhiul.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
  </entry>
  
  <entry>
    <title>UPCOJ 9999 Cube</title>
    <link href="http://zuhiul.github.io/2018/12/03/UPCOJ9999/"/>
    <id>http://zuhiul.github.io/2018/12/03/UPCOJ9999/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2019-01-07T13:43:52.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个 $ n<em>m $ 的棋盘，有一个 $ 1</em>1*2 $ 的长方体竖直放在 (1,1)上，你可以将其在棋盘上滚动，你的目标是让其竖直放在 ( n , m ) 上，问至少需要多少次操作。(放倒、竖直、翻滚)</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>一行，两个整数n，m (n&lt;=m)</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>需要最少时间能从(1,1)到达(n,m)，如果无解输出 $ impossible $ .</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>1 1</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>0</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/UPCOJ9999.png" alt="avatar"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题目我的做法其实比较暴力，因为和队友赌能不能1Y ，我甚至怂到写暴力对拍了．．．．</p><p>闲话少说，下面看分析．</p><p>其实还是比较好想的．</p><p>首先我们考虑哪种情况是 impossible ．比较好观察的是，当ｎ和ｍ足够大的时候就一定可达</p><p>所以我们只用找到一个ｎ和ｍ可达的下界就行了</p><p>然后就可以发现只有当ｎ和ｍ都小于３的时候会有impossible的情况(因为转不动．．．．</p><p>接下来分析其他情况，首先比较好分析的是，如果n%3==1&amp;&amp;m%3==1的话，答案可以显然得到是 (n/3+m/3)*2</p><p>剩下的同理搞搞就行了，大体情况见下表．</p><p><img src="https://raw.githubusercontent.com/zuhiul/zuhiul.github.io/master/OJ_img/UPCOJ9999res.png" alt="avatar"></p><p>比较显然的是，加的那一项和n,m％3为2的数量一致，然后就是代码啦．．．</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">3</span>==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;m/<span class="number">3</span>*<span class="number">2</span>+n<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>&amp;&amp;m==<span class="number">3</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">8</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">3</span>==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;m/<span class="number">3</span>*<span class="number">2</span>+<span class="number">4</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(m%<span class="number">3</span>==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;(m+<span class="number">2</span>)/<span class="number">3</span>*<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;m/<span class="number">3</span>*<span class="number">2</span>+<span class="number">5</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = (n/<span class="number">3</span>+m/<span class="number">3</span>)*<span class="number">2</span>;</span><br><span class="line">            ans+=(m%<span class="number">3</span>==<span class="number">2</span>)+(n%<span class="number">3</span>==<span class="number">2</span>);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给你一个 $ n&lt;em&gt;m $ 的棋盘，有一个 $ 1&lt;/em&gt;1*2 $ 的长方体竖直放在 (1,1)上，你可以将其在棋盘
      
    
    </summary>
    
    
      <category term="找规律" scheme="http://zuhiul.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3829 FarmCraft</title>
    <link href="http://zuhiul.github.io/2018/12/02/BZOJ3829/"/>
    <id>http://zuhiul.github.io/2018/12/02/BZOJ3829/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2019-01-07T12:28:34.978Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>In a village called Byteville, there are   houses connected with N-1 roads. For each pair of houses, there is a unique way to get from one to another. The houses are numbered from 1 to  . The house no. 1 belongs to the village administrator Byteasar. As part of enabling modern technologies for rural areas framework,   computers have been delivered to Byteasar’s house. Every house is to be supplied with a computer, and it is Byteasar’s task to distribute them. The citizens of Byteville have already agreed to play the most recent version of FarmCraft (the game) as soon as they have their computers.</p><p>Byteasar has loaded all the computers on his pickup truck and is about to set out to deliver the goods. He has just the right amount of gasoline to drive each road twice. In each house, Byteasar leaves one computer, and immediately continues on his route. In each house, as soon as house dwellers get their computer, they turn it on and install FarmCraft. The time it takes to install and set up the game very much depends on one’s tech savviness, which is fortunately known for each household. After he delivers all the computers, Byteasar will come back to his house and install the game on his computer. The travel time along each road linking two houses is exactly 1 minute, and (due to citizens’ eagerness to play) the time to unload a computer is negligible.</p><p>Help Byteasar in determining a delivery order that allows all Byteville’s citizens (including Byteasar) to start playing together as soon as possible. In other words, find an order that minimizes the time when everyone has FarmCraft installed.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The first line of the standard input contains a single integer N(2&lt;=N&lt;=5 00 000)  that gives the number of houses in Byteville. The second line contains N integers C1,C2…Cn(1&lt;=Ci&lt;=10^9), separated by single spaces; Ci is the installation time (in minutes) for the dwellers of house no. i.</p><p>The next N-1  lines specify the roads linking the houses. Each such line contains two positive integers a and b(1&lt;=a&lt;b&lt;=N) , separated by a single space. These indicate that there is a direct road between the houses no. a and b.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>The first and only line of the standard output should contain a single integer: the (minimum) number of minutes after which all citizens will be able to play FarmCraft together.</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>6</p><p>1 8 9 6 3 2</p><p>1 3</p><p>2 3</p><p>3 4</p><p>4 5</p><p>4 6</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>11</p><h3 id="Hits"><a href="#Hits" class="headerlink" title="Hits"></a>Hits</h3><p>Explanation: Byteasar should deliver the computers to the houses in the following order: 3, 2, 4, 5, 6, and 1. The game will be installed after 11, 10, 10, 10, 8, and 9 minutes respectively, in the house number order. Thus everyone can play after 11 minutes.</p><p>If Byteasar delivered the game in the following order: 3, 4, 5, 6, 2, and 1, then the game would be installed after: 11, 16, 10, 8, 6, and 7 minutes respectively. Hence, everyone could play only after 16 minutes.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>zuhiul是镇长，住在1号房子，镇里的房子构成了一颗树，现在zuhiul要给镇里其他房子里的小姐姐送电脑，每经过一条路径，zuhiul都要花掉一分钟<del>(才不是为了看小姐姐)</del>。但是zuhiul只负责送不负责装，每个小姐姐的脑子都比较奇怪，有些装的快，有些装的慢，最后zuhiul会返回自己的家给自己装电脑，然后他就可以和小姐姐视频了，但是必须要等所有的小姐姐都装好了才行，现在问你zuhiul最早什么时候可以和所有的小姐姐视频。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><details><br><br><summary>请先想一想再看分析    &rarr;_&rarr;&oplus;</summary><br><br>显然是树上DP，我们考虑定义DP状态，则有<br><br><br><br>f[i]表示以 i 为根的子树里，花费总时间的最大值是多少<br><br><br><br>我们定义son_num表示这个节点对应子树的节点数量<br><br><br><br>然后我们考虑转移，我们首先考虑怎么搞两个子节点的时候，然后进行推广。<br><br><br><br>不妨假设这两个字节点分别是a和b，然后可以得到先遍历a再遍历b的最大时长为<br><br><br><br>max(f[a]+1,f[b]+son_num[a]<em>2+1)<br><br><br><br>同理，先遍历b的最大时常为max(f[b]+1,f[a]+son_num[b]</em>2+1)<br><br><br><br>所以如果有max(f[a]+1,f[b]+son_num[a]<em>2+1)&lt;max(f[b]+1,f[a]+son_num[b]</em>2+1)<br><br><br><br>因为f[a]+son_num[b]<em>2+1&gt;f[a]+1并且f[b]+son_num[a]</em>2+1&gt;f[b]+1<br><br><br><br>所以只需要得到 f[b]+son_num[a]<em>2&lt;f[a]+son_num[b]</em>2<br><br><br><br>也即 f[b]-son_num[b]<em>2&lt;f[a]-son_num[a]</em>2<br><br><br><br>同样，对于多个节点来说，我们同样只要对每个子节点按照 f[son]-son_num[son]*2降序排序，然后从前往后贪心选就行了。<br><br><br><br></details><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>给大佬递上我奇丑无比的代码　(<em>/ω＼</em>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">7e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">p</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t,son_num;</span><br><span class="line">&#125; peo[maxm];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> len;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;mat[maxm];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[maxm];</span><br><span class="line"><span class="keyword">int</span> ind[maxm];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[a]-peo[a].son_num*<span class="number">2</span>&gt;f[b]-peo[b].son_num*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    peo[a].son_num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a!=<span class="number">1</span>) f[a] = peo[a].t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:mat[a])&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==pre) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(i,a);</span><br><span class="line">    &#125;</span><br><span class="line">    ind[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:mat[a])&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==pre) <span class="keyword">continue</span>;</span><br><span class="line">        ind[++ind[<span class="number">0</span>]] = i;</span><br><span class="line">        peo[a].son_num+=peo[i].son_num;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ind+<span class="number">1</span>,ind+ind[<span class="number">0</span>]+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&amp;lt;=ind[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        f[a] = max(f[a],f[ind[i]]+now+<span class="number">1</span>);</span><br><span class="line">        now+=peo[ind[i]].son_num*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max(f[<span class="number">1</span>],len*<span class="number">2</span><span class="number">-2</span>+peo[<span class="number">1</span>].t));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&amp;lt;=len;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;peo[i].t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,a,b;i&amp;lt;len;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        mat[a].push_back(b);</span><br><span class="line">        mat[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;In a village called Byteville, there are   houses connected wi
      
    
    </summary>
    
    
      <category term="树形DP" scheme="http://zuhiul.github.io/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
</feed>
